From 9cf25cdeaafeb0f8867051f244212f98f5d8d46b Mon Sep 17 00:00:00 2001
From: Robotti Ruttunen <robotti@versionhallinta-kurssi>
Date: Fri, 5 Jun 2009 20:30:54 +0300
Subject: Longcat is looooooooooooooooong

---
 src/main/java/longcat/CliArgumentParser.java     |   31 +++++++++++++++------
 src/test/java/longcat/CliArgumentParserTest.java |   16 +++++++++++
 2 files changed, 38 insertions(+), 9 deletions(-)

diff --git a/src/main/java/longcat/CliArgumentParser.java b/src/main/java/longcat/CliArgumentParser.java
index 7d8bd0f..5a868dd 100644
--- a/trunk/src/main/java/longcat/CliArgumentParser.java
+++ b/trunk/src/main/java/longcat/CliArgumentParser.java
@@ -4,8 +4,10 @@ public class CliArgumentParser {
 
     public static final String USAGE_INSTRUCTIONS = "" +
             "Usage: longcat SIZE UNIT\n" +
-            "       SIZE  an integer\n" +
-            "       UNIT  one of: m, ft, petronas\n";
+            "   SIZE    an integer\n" +
+            "   UNIT    one of: m, ft, petronas\n" +
+            "or\n" +
+            "       longcat is l[o...]ng\n";
 
     private final LongcatFactory factory;
 
@@ -14,15 +16,26 @@ public class CliArgumentParser {
     }
 
     public String parseArguments(String... args) {
-        if (args.length == 2) {
-            int length = Integer.parseInt(args[0]);
-            LengthUnit unit = LengthUnit.parse(args[1]);
-            Longcat cat = factory.createLongcat(length, unit);
-            return cat.toString();
-        } else {
+        if (args.length != 2) {
             return USAGE_INSTRUCTIONS;
-
         }
+        if (args[0].equals("is")) {
+            return parseLooong(args[1]).toString();
+        } else {
+            return parseLengthUnit(args[0], args[1]).toString();
+        }
+    }
+
+    private Longcat parseLengthUnit(String lengthStr, String unitStr) {
+        int length = Integer.parseInt(lengthStr);
+        LengthUnit unit = LengthUnit.parse(unitStr);
+        return factory.createLongcat(length, unit);
+    }
 
+    private Longcat parseLooong(String looong) {
+        if (!looong.matches("lo+ng")) {
+            throw new IllegalArgumentException("Not long: " + looong);
+        }
+        return factory.createLongcat(looong.length() - "lng".length());
     }
 }
diff --git a/src/test/java/longcat/CliArgumentParserTest.java b/src/test/java/longcat/CliArgumentParserTest.java
index 8a92367..2cfe46d 100644
--- a/trunk/src/test/java/longcat/CliArgumentParserTest.java
+++ b/trunk/src/test/java/longcat/CliArgumentParserTest.java
@@ -30,4 +30,20 @@ public class CliArgumentParserTest extends TestCase {
         String out = cli.parseArguments("10000", "ft");
         assertEquals(dummyLongcat.toString(), out);
     }
+
+    public void test__Longcat_is_loooooooooooooooooooooong() {
+        String oooo = "oooooooooooooooooooooo";
+        when(factory.createLongcat(oooo.length())).thenReturn(dummyLongcat);
+        String out = cli.parseArguments("is", "l" + oooo + "ng");
+        assertEquals(dummyLongcat.toString(), out);
+    }
+
+    public void test__Longcat_is_short() {
+        try {
+            cli.parseArguments("is", "short");
+            fail();
+        } catch (IllegalArgumentException e) {
+            assertEquals("Not long: short", e.getMessage());
+        }
+    }
 }
-- 
1.6.0.6

